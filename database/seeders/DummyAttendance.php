<?php

namespace Database\Seeders;

use App\Enum\AttendanceStatus;
use App\Models\Attendance;
use App\Models\Holiday;
use App\Models\RawAttendance; // <-- TAMBAHKAN IMPORT INI
use App\Models\User;
use Carbon\Carbon;
use Carbon\CarbonPeriod;
use Illuminate\Database\Seeder;

class DummyAttendance extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // --- Minta input dari pengguna ---
        $year = $this->command->ask('Enter the year to generate data for (e.g., 2025)', now()->year);
        $month = $this->command->ask('Enter the month to generate data for (1-12)', now()->subMonth()->month);

        if (!is_numeric($year) || !is_numeric($month) || $month < 1 || $month > 12) {
            $this->command->error('Invalid year or month provided. Aborting.');
            return;
        }

        $this->command->info("Generating dummy attendance data for month {$month}, year {$year}...");

        $targetDate = Carbon::create((int)$year, (int)$month, 1);
        $period = CarbonPeriod::create($targetDate->copy()->startOfMonth(), $targetDate->copy()->endOfMonth());

        $holidays = Holiday::whereBetween('date', [$period->getStartDate(), $period->getEndDate()])
            ->pluck('date')->map(fn ($date) => $date->toDateString());

        $users = User::where('is_active', true)->whereHas('userSchedules')->get();

        foreach ($users as $user) {
            foreach ($period as $date) {
                $userSchedule = $user->userSchedules()
                    ->where('start_date', '<=', $date)
                    ->where(fn ($q) => $q->where('end_date', '>=', $date)->orWhereNull('end_date'))
                    ->first();

                if (!$userSchedule) {
                    continue;
                }

                $dayOfWeek = $date->dayOfWeekIso;
                $workScheduleDay = $userSchedule->workSchedule->days()->where('day_of_week', $dayOfWeek)->first();

                $isWorkDay = $workScheduleDay && $workScheduleDay->time && !$holidays->contains($date->toDateString());

                if (!$isWorkDay) {
                    Attendance::create([
                        'user_id' => $user->id,
                        'work_schedule_id' => $userSchedule->work_schedule_id,
                        'date' => $date,
                        'status' => AttendanceStatus::HOLIDAY,
                        'notes' => 'Scheduled day off or national holiday.',
                    ]);
                    continue;
                }

                // --- LOGIKA UNTUK HARI KERJA ---
                $workTime = $workScheduleDay->time;
                $scheduledStartTime = $date->copy()->setTimeFromTimeString($workTime->start_time);
                $scheduledEndTime = $date->copy()->setTimeFromTimeString($workTime->end_time);

                $rand = rand(1, 100);

                if ($rand <= 95) { // 95% kemungkinan hadir
                    $isLate = rand(1, 100) > 80;
                    $lateMinutes = 0;

                    if ($isLate) {
                        $clockIn = $scheduledStartTime->copy()->addMinutes(rand(1, 60));
                        $lateMinutes = (int) $scheduledStartTime->diffInMinutes($clockIn);
                    } else {
                        $clockIn = $scheduledStartTime->copy()->subMinutes(rand(1, 15));
                    }

                    $clockOut = $scheduledEndTime->copy()->addMinutes(rand(0, 120));

                    $status = ($lateMinutes > $workTime->late_tolerance_minutes)
                        ? AttendanceStatus::LATE
                        : AttendanceStatus::PRESENT;
                    
                    // --- PERUBAHAN DI SINI: Insert juga ke trx_raw_attendances ---
                    RawAttendance::create([
                        'user_id' => $user->id,
                        'date' => $date->toDateString(),
                        'clock_in' => $clockIn,
                        'clock_out' => $clockOut,
                    ]);
                    
                    Attendance::create([
                        'user_id' => $user->id,
                        'work_schedule_id' => $userSchedule->work_schedule_id,
                        'date' => $date,
                        'clock_in' => $clockIn,
                        'clock_out' => $clockOut,
                        'late_minutes' => $lateMinutes,
                        'status' => $status,
                        'notes' => 'Dummy data generated by seeder.',
                    ]);

                } else { // 5% kemungkinan mangkir
                    Attendance::create([
                        'user_id' => $user->id,
                        'work_schedule_id' => $userSchedule->work_schedule_id,
                        'date' => $date,
                        'status' => AttendanceStatus::ABSENT,
                        'notes' => 'Dummy data generated by seeder.',
                    ]);
                }
            }
        }

        $this->command->info('Dummy attendance data has been generated successfully.');
    }
}

